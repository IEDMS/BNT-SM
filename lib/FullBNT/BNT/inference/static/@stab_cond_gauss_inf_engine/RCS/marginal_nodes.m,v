head	1.2;
access;
symbols;
locks
	deventer:1.2; strict;
comment	@// @;


1.2
date	2003.02.10.12.27.24;	author deventer;	state Exp;
branches;
next	1.1;

1.1
date	2003.01.29.16.43.57;	author deventer;	state Exp;
branches;
next	;


desc
@Original method
@


1.2
log
@Version vor Adaption auf jtree_inf_engine Format
@
text
@function marginal = marginal_nodes(engine, query, add_ev)
% MARGINAL_NODES Compute the marginal on the specified query nodes (stab_cond_gauss)
% marginal = marginal_nodes(engine, query, add_ev)
%
% 'query' must be a singleton set.
% add_ev is an optional argument; if 1, we will "inflate" the marginal of observed nodes
% to their original size, adding 0s to the positions which contradict the evidence

if nargin < 3, add_ev = 0; end

bnet = bnet_from_engine(engine);
nclq = length(engine.cliques);

for i = 1:nclq
  if mysubset(query, engine.cliques{i})
    pot = struct(engine.clpot{i});
    %if mysubset(query, pot.cheaddom) | mysubset(query, pot.ddom)
    if mysubset(query, pot.domain)
      marginal = marginal_singleclq_nodes(engine, i, query);
      break;
    end
  end
end

marginal = marginal_difclq_nodes(engine, query);

if add_ev
  bnet = bnet_from_engine(engine);
  %marginal = add_ev_to_dmarginal(marginal, engine.evidence, bnet.node_sizes);
  marginal = add_evidence_to_gmarginal(marginal, engine.evidence, bnet.node_sizes, bnet.cnodes);
end
@


1.1
log
@Initial revision
@
text
@d10 1
@
